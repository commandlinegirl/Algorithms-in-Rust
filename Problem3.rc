/*
 * Problem3
 * Design a stack that support the normal stack operations( push(), pop(), 
 * peek(), and isEmpty() ) but also has a function called getMin() which 
 * returns the value of the minimum element in the stack. 
 * All functions should run in constant ( (O(1) ) time.
 */

struct Element {
    value: i32,
    current_min: i32,
}

struct MinStack<'a> {
    vector: &'a mut Vec<Element>,
}

impl<'a> MinStack<'a> {
    fn peek(&self) -> i32 {
        return self.vector[self.vector.len() - 1].value;
    }

    fn push(&mut self, i: i32) {
        let mut current_min_value = i;
        if !self.vector.is_empty() && self.vector[self.vector.len() - 1].current_min < i {
            current_min_value = self.vector[self.vector.len() - 1].current_min;
        }

        let new_element = Element { value: i, current_min: current_min_value };
        self.vector.push(new_element);
    }

    fn pop(&mut self) -> i32 {
        return self.vector.pop().unwrap().value;
    } 

    fn is_empty(&self) -> bool {
        return self.vector.len() == 0;
    }

    fn last_element(&self) -> &Element {
        return &self.vector[self.vector.len() - 1];
    }

    fn get_min(&mut self) -> i32 {
        return self.last_element().current_min;
    }

}

fn main() {
    let mut ms = MinStack { vector: &mut vec![] };
    assert!(ms.is_empty() == true);
    ms.push(3);
    ms.push(2);
    ms.push(5);
    ms.push(1);
    ms.push(7);
    assert!(ms.peek() == 7);
    assert!(ms.get_min() == 1);
    assert!(ms.pop() == 7);
    assert!(ms.get_min() == 1);
    assert!(ms.pop() == 1);
    assert!(ms.get_min() == 2);
    println!("Run OK.", )
}

